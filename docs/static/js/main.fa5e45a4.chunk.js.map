{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoriesOld","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"qMAgDeA,EA5CK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGLC,mBAAS,IAHJ,mBAGlCC,EAHkC,KAGtBC,EAHsB,KAyBzC,OAEI,0BAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAa,OAAMP,GAAN,mBAAqBO,OAEjDN,EAAc,OAOd,2BACIO,KAAO,OACPC,MAAUT,EAEVU,SA1Bc,SAACP,GAIvBF,EAAeE,EAAEQ,OAAOF,YCAjBG,EAZK,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAC3B,OACI,yBAAKC,UAAU,0CAEX,yBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,2BAAKA,K,uBCJJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbN,EAHa,iDAGoCO,UAAWF,GAH/C,6BAFX,oCAEW,SAIAG,MAAOR,GAJP,cAIbS,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAXvB,kBAeZY,GAfY,4CAAH,sDCwDLM,EArDC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAEdpB,mBAAS,CAChC0B,KAAM,GACNQ,SAAS,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAlBAC,qBAAW,WAEPlB,EAASC,GACJkB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLV,KAAMa,EACNL,SAAS,MAGd,UAIZ,CAACd,IAEGe,EDrB0BM,CAAcrB,GAAlCW,EAHiB,EAGtBL,KAAaQ,EAHS,EAGTA,QAerB,OACI,oCACI,4BAAMd,GAGJc,GAAW,uBAAGlB,UAAW,oCAAd,eAEb,yBAAKA,UAAU,aAURe,EAAOH,KAAK,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIa,IAAMb,EAAIC,IACLD,UEGlBc,EAzCO,WAAO,IAAD,EAEY3C,mBAAS,CAAC,cAFtB,mBAEjB4C,EAFiB,KAEL7C,EAFK,KAcxB,OACI,oCACI,4BAAM,gBAEN,kBAAC,EAAD,CACIA,cAAgBA,IAEpB,6BAIA,4BAGQ6C,EAAWhB,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIsB,IAAMtB,EACNA,SAAWA,UC5BjCyB,G,MAAUC,SAASC,eAAe,SAGxCC,IAASC,OAAQ,kBAAC,EAAD,MAAkBJ,I","file":"static/js/main.fa5e45a4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    //la ventaja de usar un hook es que al cambiar el valor este se renderiza en el HTML\r\n    const [inputValue, setInputValue] = useState(''); //si no mando '' recibe un undefined y genera un error\r\n\r\n    //recibe el evento de onChage\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        //e.target.value tiene todo el texto del input, no solo el nuevo valor que ingresamos\r\n        //en definitiva estamos setiando el inputValue con el todo el texto del input cuando se genera el evento\r\n        setInputValue( e.target.value ) //recibe el nuevo valor que le queremos dar a inputValue\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        //evita el comportamiento por defecto del form y no recarga la pagina\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){\r\n            //el callback del setCategories tiene el estado anterior de las categorias y lo recibe como parametro\r\n            setCategories( categoriesOld => [ inputValue, ...categoriesOld ] ); //dejamos en la primera posicion la nueva categoria\r\n            //limpiamos o vaciamos el input\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        //no es necesario en fragment ya que el from contiene a todos los elementos\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type = 'text'\r\n                value = { inputValue }\r\n                //onChange= { e => handleInputChange(e) }\r\n                onChange= { handleInputChange }//el evento pasa el obj evento como parametro a la funcion handleInputChange implicitamente\r\n            />\r\n        </form>\r\n    );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst GifGridItem = ( { title, url } ) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn' >\r\n\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default GifGridItem;\r\n","\r\nconst key = 'BT6NiLNV9HVbpieNGxUXWlBNyO9m42mK';\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    //encodeURI( category ) escapa los espacios en la peticion\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=${key}`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    /*\r\n    const [images, setImages] = useState([]);\r\n    //esto hace que la funcion getGifs se ejecute segun el array de dependencias\r\n    //el segundo parametro es una lista de dependencias, se manda vacio para que el useEffect se dispare una sola vez\r\n    //en este caso se volvera a ejecutar la funcioon getGifs cuando el valor de category cambie\r\n    useEffect( () => {\r\n        //getGifs( category ).then( img => setImages( img ));\r\n        //se puede poner asi cuando el primer arg es mandado como primer argumento a la fucion que desea ejecutar\r\n        getGifs( category ).then( setImages );\r\n    }, [ category ]);\r\n    */\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            {/*operador ternario corto, solo if */}\r\n            { loading && <p className= 'animate__animated animate__flash' >Cargando...</p> }\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    /*\r\n                    //desestructuramos el img que itera el map\r\n                    images.map( ({ id, title }) => (\r\n                        //sin {} es un return implicito\r\n                        <li key={ id }>{ title }</li>\r\n                    ))\r\n                    */\r\n\r\n                   images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img } // id, title, url\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n       data: [],\r\n       loading: true\r\n    });\r\n    \r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n                    \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 2000);\r\n\r\n            });\r\n           \r\n    }, [category] );\r\n\r\n    return state; \r\n\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp =  () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    //const handleAdd = () => {\r\n        //setCategories( [ ...categories, 'Hunter X Hunter' ] );\r\n        //setCategories( [ 'Hunter X Hunter', ...categories ] ); //se agrega al principio de la lista\r\n        \r\n        //set puede tener un callback donde el primer arg. es el valor anterior y debe retornar el nuevo valor o estado\r\n        //esto es util cuando no tenemos acceso a las categorias\r\n        //setCategories( cats => [ ...cats, 'Oliver Aton' ] );\r\n    //};\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>{ 'GifExpertApp' }</h2>\r\n            {/*enviamos la referencia a la funcion setCategories al hijo*/}\r\n            <AddCategory \r\n                setCategories={ setCategories }\r\n            />\r\n            <hr />\r\n\r\n            {/*<button onClick = { handleAdd } >Agregar</button>*/}\r\n\r\n            <ol>\r\n                {\r\n                    //usamos () en el cuerpo para no usar return, como si fuera una func de fecha de una sola linea\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n\n//referencia al div del index con el id root\nconst divRoot = document.getElementById('root');\n\n//renderizamos\nReactDOM.render( <GifExpertApp />, divRoot );\n\n\n"],"sourceRoot":""}